#include <iostream>

using namespace std;



template <class T>
class node{
public:
    T item;
    node<T> *next;
    node();
    node(T);
};

template <class T>
class list{
private:
    int size;
    node<T> *head, *tail;
public:
    list();
    list(const list&);
    bool insert(T,int);
    T get(int);
    int getSize();
};

template <class T>
void display(list<T>);
    
int main() {
    int testcases,pos,item;
   
    cin>>testcases;
    list<int> l;
    for(int i = 0 ; i<testcases ; i++){
        cin>>pos;
        cin>>item;
        l.insert(item,pos);
        display(l);
    }
    return 0;
}

template <class T>
node<T>::node(){
   item = 0;
   next = NULL;
} 

template <class T>
node<T>::node(T item){
   this->item = item;
   next = NULL;
} 

template <class T>
list<T>::list(){
    size = 0;
    head = NULL;
    tail = NULL;
}

template <class T>
list<T>::list(const list& l){
    size = 0;
    head = NULL;
    tail = NULL;
    node<T> *tmp = l.head;
    int ctr = 0;
    while(tmp!=NULL){
        insert(tmp->item,ctr);
        tmp = tmp->next;
        ctr++;
    }
}


template <class T>
bool list<T>::insert(T i,int pos){
    
    node<T> *item = new node<T>(i);
    if(pos>size||pos<0){
        return false;
    }
    if(size==0){
        if(pos!=0)
            return false;
        head = tail = item;
    }
    else if(pos==0){
        item->next = head;
        head = item;
    }
    else if(pos==size){
        tail->next = item;
        tail = item;
    }
    else{
        node<T> *tmp = head;
        int ctr = 0;
        while(ctr!=pos-1){
            tmp = tmp->next;
            ctr++;
        }
        item->next = tmp->next;
        tmp->next = item; 
   }
   size++;
   return true;
}

template <class T>
T list<T>::get(int pos){
    node<T> *tmp = head;
    int ctr = 0;
    while(ctr<pos){
        tmp = tmp->next;
        ctr++;
    }
    return tmp->item;
}

template <class T>
int list<T>::getSize(){
    return size;
}


template <class T>
void display(list<T> l){
    int ctr = 0;
    while(ctr!=l.getSize()){
        cout<<l.get(ctr)<<" ";
        ctr++;
    }
    cout<<endl;
}